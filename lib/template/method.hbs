/**
* {{&summary}}
* request: {{&methodName}}
{{#parameters}}
    {{^isSingleton}} * @param {{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
*/
export const {{&methodName}} = function(parameters = {}) {
const domain = parameters.$domain ? parameters.$domain : getDomain()
const method = '{{toLowerCase method}}'
let path = '{{&path}}'
let body
let queryParameters = {}
let form = {}

{{#parameters}}
    {{#isQueryParameter}}
        if(parameters['{{&camelCaseName}}'] !== undefined) {
        queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}']
        }
    {{/isQueryParameter}}

    {{#isPathParameter}}
        path = path.replace('{{brackets name}}', `${parameters['{{&camelCaseName}}']}`)
    {{/isPathParameter}}

    {{#isBodyParameter}}
        if(parameters['{{&camelCaseName}}'] !== undefined) {
        if (method === 'delete') {
        body = {data: parameters['{{&camelCaseName}}']}
        } else {
        body = parameters['{{&camelCaseName}}']
        }
        }
    {{/isBodyParameter}}

    {{#isFormParameter}}
        if(parameters['{{&camelCaseName}}'] !== undefined) {
        form['{{&name}}'] = parameters['{{&camelCaseName}}']
        }
    {{/isFormParameter}}

    {{#required}}
        if(parameters['{{&camelCaseName}}'] === undefined) {
        return Promise.reject(new Error('Missing required {{&paramType}} parameter: {{&camelCaseName}}'))
        }
    {{/required}}

{{/parameters}}

return request(method, domain + path, body, queryParameters, form)

}
